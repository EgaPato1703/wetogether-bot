# main.py
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, StateFilter
from database import get_db, init_db, create_active_chat
from aiogram.fsm.storage.base import StorageKey
from config import BOT_TOKEN, REGULAR_TASKS_COUNT, ROMANTIC_TASKS_COUNT, CRYPTO_BOT_TOKEN, REGULAR_TASKS, ROMANTIC_TASKS, ADMIN_IDS
from crypto_integration import CryptoBotIntegration
from utils import (
    apply_coupon, get_user_balance, get_user_stats, format_balance,
    get_user_referral_code, get_user_referral_stats, update_balance,
    create_payment_transaction
)
from coupon_system import CouponSystem

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î ===
init_db()

# === –ë–æ—Ç ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === CryptoBot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ===
crypto_bot = CryptoBotIntegration(CRYPTO_BOT_TOKEN)

# === –°–∏—Å—Ç–µ–º–∞ –∫—É–ø–æ–Ω–æ–≤ ===
coupon_system = CouponSystem()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class Registration(StatesGroup):
    name = State()
    gender = State()
    age = State()
    city = State()
    bio = State()
    photo = State()

class Search(StatesGroup):
    city = State()
    age_range = State()

class CryptoInput(StatesGroup):
    waiting_for_amount = State()

class TaskAnswer(StatesGroup):
    waiting_for_answer = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É")],
    [KeyboardButton(text="üìù –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
    [KeyboardButton(text="‚≠ê –ü—Ä–µ–º–∏—É–º"), KeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã")],
    [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")]
], resize_keyboard=True)

edit_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
], resize_keyboard=True)

gender_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üôé –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üôç –ñ–µ–Ω—Å–∫–∏–π")]
], resize_keyboard=True)

like_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ù§Ô∏è –õ–∞–π–∫", callback_data="like"),
     InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="dislike")]
])

# –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
start_tasks_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üéÆ –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è", callback_data="start_tasks"),
     InlineKeyboardButton(text="‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="ignore_match")]
])

# –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
show_profile_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üë§ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile")],
    [InlineKeyboardButton(text="üíï –ü–ª–∞—Ç–Ω—ã–π —Ç—É—Ä ($2)", callback_data="buy_romantic_tour")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—É—Ä–∞
romantic_tour_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä ($2)", callback_data="buy_romantic_tour")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
payment_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚Çø –û–ø–ª–∞—Ç–∏—Ç—å CryptoBot", callback_data="pay_crypto")],
    [InlineKeyboardButton(text="üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞", callback_data="pay_balance")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
def is_registered(user_id):
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        return cur.fetchone() is not None
    except Exception as e:
        print(f"Error checking registration: {e}")
        return False
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    if is_registered(message.from_user.id):
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_kb)
        return
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä—É —á–µ—Ä–µ–∑ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.\n"
                         "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Registration.name)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
@dp.message(Registration.name)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb)
    await state.set_state(Registration.gender)

@dp.message(Registration.gender, F.text.in_(["üôé –ú—É–∂—Å–∫–æ–π", "üôç –ñ–µ–Ω—Å–∫–∏–π"]))
async def reg_gender(message: Message, state: FSMContext):
    gender = "male" if message.text == "üôé –ú—É–∂—Å–∫–æ–π" else "female"
    await state.update_data(gender=gender)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(Registration.age)

@dp.message(Registration.age)
async def reg_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        await state.update_data(age=age)
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
        await state.set_state(Registration.city)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")

@dp.message(Registration.city)
async def reg_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text.lower())
    await message.answer("–ù–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞).")
    await state.set_state(Registration.bio)

@dp.message(Registration.bio)
async def reg_bio(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await message.answer("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ? –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–µ–π—á–∞—Å.")
    await state.set_state(Registration.photo)

@dp.message(StateFilter(Registration.photo), F.photo)
async def reg_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        cur.execute("SELECT balance FROM saved_balances WHERE user_id = ? ORDER BY saved_at DESC LIMIT 1", (message.from_user.id,))
        saved_balance_result = cur.fetchone()
        restored_balance = saved_balance_result[0] if saved_balance_result else 0.0
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        cur.execute("""
            REPLACE INTO users (user_id, name, gender, age, city, bio, photo, balance)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (message.from_user.id, data['name'], data['gender'], data['age'],
              data['city'], data['bio'], photo_id, restored_balance))
        
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if saved_balance_result:
            cur.execute("DELETE FROM saved_balances WHERE user_id = ?", (message.from_user.id,))
            
        db.commit()
        
        if restored_balance > 0:
            await message.answer(
                f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å ${restored_balance:.2f} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=main_kb
            )
        else:
        await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_kb)
            
        await state.clear()
    except Exception as e:
        print(f"Error saving photo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

@dp.message(StateFilter(Registration.photo))
async def skip_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        cur.execute("SELECT balance FROM saved_balances WHERE user_id = ? ORDER BY saved_at DESC LIMIT 1", (message.from_user.id,))
        saved_balance_result = cur.fetchone()
        restored_balance = saved_balance_result[0] if saved_balance_result else 0.0
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        cur.execute("""
            REPLACE INTO users (user_id, name, gender, age, city, bio, balance)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (message.from_user.id, data['name'], data['gender'], data['age'],
              data['city'], data['bio'], restored_balance))
        
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        if saved_balance_result:
            cur.execute("DELETE FROM saved_balances WHERE user_id = ?", (message.from_user.id,))
            
        db.commit()
        
        if restored_balance > 0:
            await message.answer(
                f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å ${restored_balance:.2f} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=main_kb
            )
        else:
        await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_kb)
            
        await state.clear()
    except Exception as e:
        print(f"Error saving profile: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ü–æ–∏—Å–∫ –ø–∞—Ä—ã ===
@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—É")
async def ask_city_for_search(message: Message, state: FSMContext):
    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –ø–∞—Ä—É?")
    await state.set_state(Search.city)

@dp.message(Search.city)
async def ask_age_range(message: Message, state: FSMContext):
    await state.update_data(city=message.text.lower())
    await message.answer("–ö–∞–∫–æ–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ù–∞–ø—Ä–∏–º–µ—Ä: 18-30")
    await state.set_state(Search.age_range)

@dp.message(Search.age_range)
async def start_search_with_filters(message: Message, state: FSMContext):
    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç
    try:
        min_age, max_age = map(int, message.text.strip().split('-'))
        data = await state.get_data()
        city_preference = data['city']
        user_id = message.from_user.id

        db = None
        try:
            db = get_db()
            cur = db.cursor()
            cur.execute("SELECT gender FROM users WHERE user_id = ?", (user_id,))
            result = cur.fetchone()
            if not result:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è.")
                await state.clear()
                return

            my_gender = result[0]
            target_gender = "female" if my_gender == "male" else "male"

            # –ò—â–µ–º –∞–Ω–∫–µ—Ç—ã
            cur.execute("""
                SELECT u.* FROM users u
                WHERE u.gender = ?
                  AND LOWER(u.city) = LOWER(?)
                  AND u.age BETWEEN ? AND ?
                  AND u.user_id != ?
                  AND u.is_deleted = FALSE
                ORDER BY RANDOM() LIMIT 1
            """, (target_gender, city_preference, min_age, max_age, user_id))

            profile = cur.fetchone()
            if not profile:
                await message.answer(f"–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å :(\n\n–ü–æ–∏—Å–∫: {target_gender} –≤ '{city_preference}' {min_age}-{max_age}")
                await state.clear()
                return

            user_data = {
                "user_id": profile[0],
                "name": profile[1],
                "gender": profile[2],
                "age": profile[3],
                "city": profile[4],
                "bio": profile[5],
                "photo": profile[6]
            }

            text = f"""
üë§ {user_data['name']}, {user_data['age']}
üìç {user_data['city']}
üìù {user_data['bio']}
"""

            await state.update_data(current_profile_id=user_data['user_id'])

            if user_data['photo']:
                await bot.send_photo(
                    chat_id=message.chat.id,
                    photo=user_data['photo'],
                    caption=text,
                    reply_markup=like_kb
                )
            else:
                await message.answer(text, reply_markup=like_kb)

        except Exception as e:
            print(f"‚ùå SEARCH ERROR: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ.")
            await state.clear()
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass

    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä: 18-30")
        await state.clear()

# === –õ–∞–π–∫–∏ –∏ –≤–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏ ===
@dp.callback_query(F.data == "like")
async def handle_like(callback_query, state: FSMContext):
    user_id = callback_query.from_user.id
    data = await state.get_data()
    liked_id = data.get('current_profile_id')

    if not liked_id:
        await callback_query.answer("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É.")
        return

    db = None
    try:
        db = get_db()
        cur = db.cursor()

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç—á–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        cur.execute("DELETE FROM matches WHERE (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?)", 
                   (user_id, liked_id, liked_id, user_id))
        cur.execute("DELETE FROM match_tasks WHERE match_id IN (SELECT id FROM matches WHERE (user1_id = ? AND user2_id = ?) OR (user1_id = ? AND user2_id = ?))", 
                   (user_id, liked_id, liked_id, user_id))

        # –°—Ç–∞–≤–∏–º –ª–∞–π–∫ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ö–µ–º–µ: user_id, liked_id)
        cur.execute("INSERT OR IGNORE INTO likes (user_id, liked_id) VALUES (?, ?)", (user_id, liked_id))
        db.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ (liked_id —É–∂–µ –ª–∞–π–∫–∞–ª user_id)
        cur.execute("SELECT 1 FROM likes WHERE user_id = ? AND liked_id = ?", (liked_id, user_id))
        mutual = cur.fetchone() is not None

        if mutual:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç—á
            cur.execute("INSERT INTO matches (user1_id, user2_id, tasks_completed, romantic_tasks_completed) VALUES (?, ?, 0, 0)", (user_id, liked_id))
            db.commit()
            match_id = cur.lastrowid

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è
            await bot.send_message(user_id, "üíï –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!", reply_markup=start_tasks_kb)
            await bot.send_message(liked_id, "üíï –£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!", reply_markup=start_tasks_kb)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å –ª–∞–π–∫–æ–º
            cur.execute("SELECT name, age, city, bio, photo FROM users WHERE user_id = ?", (user_id,))
            liker = cur.fetchone()
            if liker:
                liker_name, liker_age, liker_city, liker_bio, liker_photo = liker
                text = f"""
üë§ {liker_name}, {liker_age}
üìç {liker_city}
üìù {liker_bio}
"""
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è liked_id, —á—Ç–æ–±—ã –∫–æ–ª–ª–±—ç–∫ 'like' –∑–Ω–∞–ª —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                try:
                    liked_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=liked_id, user_id=liked_id, bot_id=bot.id))
                    await liked_state_context.update_data(current_profile_id=user_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∞–π–∫: {e}")

                try:
                    if liker_photo:
                        await bot.send_photo(chat_id=liked_id, photo=liker_photo, caption=text, reply_markup=like_kb)
                    else:
                        await bot.send_message(chat_id=liked_id, text=text, reply_markup=like_kb)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ª–∞–π–∫: {e}")
            else:
                try:
                    await bot.send_message(liked_id, "üíò –ö—Ç–æ-—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ª–∞–π–∫! –ó–∞–π–¥–∏—Ç–µ –≤ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.")
                except:
                    pass

        await callback_query.message.delete()
        await callback_query.answer()
        await state.clear()
        
    except Exception as e:
        print(f"Error handling like: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

@dp.callback_query(F.data == "dislike")
async def handle_dislike(callback_query, state: FSMContext):
    await callback_query.message.delete()
    await callback_query.answer()
    await state.clear()

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è ===
async def start_first_task(match_id: int, user1_id: int, user2_id: int):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        task_text = REGULAR_TASKS[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        text = f"üéØ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{task_text}"
        
        try:
            await bot.send_message(user1_id, text)
        except:
            pass
        try:
            await bot.send_message(user2_id, text)
        except:
            pass
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –û–ë–û–ò–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        try:
            user1_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
            user2_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return
        
        await user1_state_context.set_state(TaskAnswer.waiting_for_answer)
        await user1_state_context.update_data(match_id=match_id, task_index=0, is_romantic=False, partner_id=user2_id)
        
        await user2_state_context.set_state(TaskAnswer.waiting_for_answer)
        await user2_state_context.update_data(match_id=match_id, task_index=0, is_romantic=False, partner_id=user1_id)
        
        print(f"‚úÖ DEBUG: –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç–æ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
        
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞–Ω–∏–π: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è ===
@dp.message(StateFilter(TaskAnswer.waiting_for_answer))
async def process_task_answer(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    match_id = data.get('match_id')
    task_index = data.get('task_index')
    is_romantic = data.get('is_romantic', False)
    
    print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üîç DEBUG: match_id: {match_id}, task_index: {task_index}, is_romantic: {is_romantic}")
    print(f"üîç DEBUG: –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")

    if not match_id:
        await message.answer("–û—à–∏–±–∫–∞: –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        await state.clear()
        return

    db = None
    try:
        db = get_db()
        cur = db.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        cur.execute("SELECT user1_id, user2_id, tasks_completed, romantic_tasks_completed FROM matches WHERE id = ?", (match_id,))
        match_data = cur.fetchone()
        if not match_data:
            await message.answer("–û—à–∏–±–∫–∞: –º–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        user1_id, user2_id, tasks_completed, romantic_tasks_completed = match_data
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º partner_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º
        partner_id = data.get('partner_id')
        if not partner_id:
            partner_id = user1_id if user_id == user2_id else user2_id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        print(f"üîç DEBUG: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
        print(f"üîç DEBUG: –ï—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç: {hasattr(message, 'text') and message.text}")
        print(f"üîç DEBUG: –ï—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å: {hasattr(message, 'voice') and message.voice}")
        print(f"üîç DEBUG: –ï—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ: {hasattr(message, 'video') and message.video}")
        
        if is_romantic:
            print(f"üîç DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            if getattr(message, 'voice', None):
                answer_content = message.voice.file_id
                answer_type = "voice"
                print(f"‚úÖ DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            elif getattr(message, 'video', None):
                answer_content = message.video.file_id
                answer_type = "video"
                print(f"‚úÖ DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            elif getattr(message, 'audio', None):
                # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤–º–µ—Å—Ç–æ voice
                answer_content = message.audio.file_id
                answer_type = "audio"
                print(f"‚úÖ DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            else:
                print(f"‚ùå DEBUG: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {type(message)}")
                await message.answer("–î–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                return
        else:
            if message.text:
                answer_content = message.text.strip()
                answer_type = "text"
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.")
                return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
        cur.execute("""
            INSERT OR REPLACE INTO match_tasks (match_id, task_index, user_id, answer, answer_type)
            VALUES (?, ?, ?, ?, ?)
        """, (match_id, task_index, user_id, answer_content, answer_type))
        db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—É
        try:
            if answer_type == "text":
                await bot.send_message(partner_id, f"üéØ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task_index + 1}:\n\n{answer_content}")
                print(f"‚úÖ DEBUG: –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner_id}")
            elif answer_type == "voice":
                await bot.send_voice(partner_id, voice=answer_content, caption=f"üé§ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task_index + 1}!")
                print(f"‚úÖ DEBUG: –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner_id}")
            elif answer_type == "video":
                await bot.send_video(partner_id, video=answer_content, caption=f"üé• –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task_index + 1}!")
                print(f"‚úÖ DEBUG: –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner_id}")
            elif answer_type == "audio":
                await bot.send_audio(partner_id, audio=answer_content, caption=f"üéµ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ {task_index + 1}!")
                print(f"‚úÖ DEBUG: –ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É {partner_id}")
        except Exception as e:
            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—É: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—É.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (—Å—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏)
        cur.execute("SELECT COUNT(DISTINCT user_id) FROM match_tasks WHERE match_id = ? AND task_index = ?", (match_id, task_index))
        answers_count = cur.fetchone()[0]

        if answers_count >= 2:
            # –û–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
            await message.answer("üéâ –û–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...")
            await bot.send_message(partner_id, "üéâ –û–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if is_romantic:
                cur.execute("UPDATE matches SET romantic_tasks_completed = romantic_tasks_completed + 1 WHERE id = ?", (match_id,))
            else:
                cur.execute("UPDATE matches SET tasks_completed = tasks_completed + 1 WHERE id = ?", (match_id,))
            db.commit()

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            try:
                user1_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
                user2_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))
                
                await user1_state_context.clear()
                await user2_state_context.clear()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
            await show_next_task_or_finish(match_id, user1_id, user2_id, is_romantic)
        else:
            # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏–ª - –∂–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ
            await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä—É! –û–∂–∏–¥–∞–µ–º –µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")

    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ===
async def show_next_task_or_finish(match_id: int, user1_id: int, user2_id: int, is_romantic: bool):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞—Ç—á"""
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        if is_romantic:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
            cur.execute("SELECT romantic_tasks_completed FROM matches WHERE id = ?", (match_id,))
            result = cur.fetchone()
            if not result:
                return
            
            progress = result[0]
            
            if progress >= ROMANTIC_TASKS_COUNT:
                # –í—Å–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                text = "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é."
                try:
                    await bot.send_message(user1_id, text, reply_markup=show_profile_kb)
                except:
                    pass
                try:
                    await bot.send_message(user2_id, text, reply_markup=show_profile_kb)
                except:
                    pass
                
                # –î–µ–ª–∞–µ–º –º–∞—Ç—á –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
                cur.execute("UPDATE matches SET active = FALSE WHERE id = ?", (match_id,))
                db.commit()
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                task_text = ROMANTIC_TASKS[progress]
                text = f"üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ {progress + 1}:\n\n{task_text}"
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –û–ë–û–ò–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                try:
                    user1_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
                    user2_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                    return
                
                await user1_state_context.set_state(TaskAnswer.waiting_for_answer)
                await user1_state_context.update_data(match_id=match_id, task_index=progress, is_romantic=True, partner_id=user2_id)
                
                await user2_state_context.set_state(TaskAnswer.waiting_for_answer)
                await user2_state_context.update_data(match_id=match_id, task_index=progress, is_romantic=True, partner_id=user1_id)
                
                print(f"‚úÖ DEBUG: –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ {progress + 1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–∞—Ç—á–∞ {match_id} —É –û–ë–û–ò–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                try:
                    await bot.send_message(user1_id, text)
                except:
                    pass
                try:
                    await bot.send_message(user2_id, text)
                except:
                    pass
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            cur.execute("SELECT tasks_completed FROM matches WHERE id = ?", (match_id,))
            result = cur.fetchone()
            if not result:
                return
            
            tasks_completed = result[0]
            
            if tasks_completed >= REGULAR_TASKS_COUNT:
                # –í—Å–µ –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–ª–∞—á–µ–Ω –ª–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä
                cur.execute("SELECT romantic_tour_paid FROM matches WHERE id = ?", (match_id,))
                romantic_tour_paid = cur.fetchone()[0]
                
                if romantic_tour_paid:
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä
                    await start_romantic_tour(match_id, user1_id, user2_id)
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
                    text = "üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞."
                    try:
                        await bot.send_message(user1_id, text, reply_markup=show_profile_kb)
                    except:
                        pass
                    try:
                        await bot.send_message(user2_id, text, reply_markup=show_profile_kb)
                    except:
                        pass
                    
                    # –î–µ–ª–∞–µ–º –º–∞—Ç—á –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–µ –æ–ø–ª–∞—á–µ–Ω
                    cur.execute("UPDATE matches SET active = FALSE WHERE id = ?", (match_id,))
                    db.commit()
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—ã—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                task_text = REGULAR_TASKS[tasks_completed]
                text = f"üéØ –ó–∞–¥–∞–Ω–∏–µ {tasks_completed + 1}:\n\n{task_text}"
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                try:
                    user1_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
                    user2_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
                    return
                
                await user1_state_context.set_state(TaskAnswer.waiting_for_answer)
                await user1_state_context.update_data(match_id=match_id, task_index=tasks_completed, is_romantic=False, partner_id=user2_id)
                
                await user2_state_context.set_state(TaskAnswer.waiting_for_answer)
                await user2_state_context.update_data(match_id=match_id, task_index=tasks_completed, is_romantic=False, partner_id=user1_id)
                
                print(f"‚úÖ DEBUG: –û–±—ã—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ {tasks_completed + 1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–∞—Ç—á–∞ {match_id}")
                
                try:
                    await bot.send_message(user1_id, text)
                except:
                    pass
                try:
                    await bot.send_message(user2_id, text)
                except:
                    pass
                
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ ===
@dp.callback_query(F.data == "show_profile")
async def show_partner_profile(callback_query):
    user_id = callback_query.from_user.id
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∏—â–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º—É –º–∞—Ç—á—É
        cur.execute("""
            SELECT user1_id, user2_id 
            FROM matches 
            WHERE (user1_id = ? OR user2_id = ?) 
              AND active = FALSE 
              AND (tasks_completed >= 5 OR romantic_tasks_completed >= 3)
            ORDER BY id DESC 
            LIMIT 1
        """, (user_id, user_id))
        match = cur.fetchone()
        if not match:
            await callback_query.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        user1_id, user2_id = match
        partner_id = user1_id if user_id == user2_id else user2_id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        cur.execute("SELECT name FROM users WHERE user_id = ?", (partner_id,))
        partner_profile = cur.fetchone()
        if not partner_profile:
            await callback_query.answer("–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        partner_name = partner_profile[0]
        
        # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ Telegram API
        try:
            partner_user = await bot.get_chat(partner_id)
            partner_username = partner_user.username
        except:
            partner_username = None
        
        text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞:\n\n"
        text += f"–ò–º—è: {partner_name}\n"
        if partner_username:
            text += f"Username: @{partner_username}\n"
        else:
            text += "Username: –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        await callback_query.message.edit_text(text)
        await callback_query.answer()
        
    except Exception as e:
        print(f"Error showing partner profile: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ ===
@dp.message(F.text == "üìù –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def show_my_profile(message: Message):
    user_id = message.from_user.id
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        profile = cur.fetchone()
        if not profile:
            await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        balance = get_user_balance(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å
        premium_status = ""
        if balance >= 10:
            premium_status = "üëë –ü–†–ï–ú–ò–£–ú"
        elif balance >= 5:
            premium_status = "‚≠ê –ü–†–û"
        elif balance >= 2:
            premium_status = "üíé VIP"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_user_stats(user_id)
        
        text = f"""
üë§ {profile[1]}, {profile[3]} {premium_status}
üìç {profile[4]}
üìù {profile[5]}
üí∞ –ë–∞–ª–∞–Ω—Å: ${balance:.2f}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –ª–∞–π–∫–æ–≤: {stats['likes_received']}
üíù –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∞–π–∫–æ–≤: {stats['likes_given']}
üíï –ú–∞—Ç—á–µ–π: {stats['matches_count']}
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['referrals_count']}

üéØ –£—Ä–æ–≤–µ–Ω—å: {'üî• –í—ã—Å–æ–∫–∏–π' if stats['likes_received'] > 10 else '‚≠ê –°—Ä–µ–¥–Ω–∏–π' if stats['likes_received'] > 5 else 'üå± –ù–∞—á–∏–Ω–∞—é—â–∏–π'}
"""
        if profile[6]:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=profile[6],
                caption=text,
                reply_markup=edit_kb
            )
        else:
            await message.answer(text, reply_markup=edit_kb)
            
    except Exception as e:
        print(f"Error showing profile: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

@dp.message(F.text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def start_edit_profile(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(Registration.name)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)

# === –ë–∞–ª–∞–Ω—Å ===
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)
    
    text = f"""üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(balance)}

üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑:
‚Ä¢ CryptoBot
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
‚Ä¢ –ö—É–ø–æ–Ω—ã

‚≠ê –°—É–ø–µ—Ä-–ª–∞–π–∫: $1
üöÄ –ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è: $3
üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä: $2 (–ø–æ—Å–ª–µ 5 –∑–∞–¥–∞–Ω–∏–π)"""
    
    balance_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Çø –ü–æ–ø–æ–ª–Ω–∏—Ç—å CryptoBot", callback_data="topup_crypto")],
        [InlineKeyboardButton(text="üé´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω", callback_data="use_balance_coupon")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(text, reply_markup=balance_kb)

# === –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ ===
@dp.message(F.text == "‚≠ê –ü—Ä–µ–º–∏—É–º")
async def show_premium(message: Message):
    text = """‚≠ê –ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏

‚≠ê –°—É–ø–µ—Ä-–ª–∞–π–∫ - $1
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ —Ç–æ–ø–µ
‚Ä¢ –ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ –≤–∑–∞–∏–º–Ω–æ—Å—Ç—å

üöÄ –ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è - $3
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É –∞–Ω–∫–µ—Ç—É —á–∞—â–µ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ

üí° –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä ($2) –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è 5 –∑–∞–¥–∞–Ω–∏–π –∏ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –≥–æ–ª–æ—Å–æ–≤—ã–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º."""
    
    premium_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä ($2)", callback_data="romantic_tour")],
        [InlineKeyboardButton(text="‚≠ê –°—É–ø–µ—Ä-–ª–∞–π–∫ ($1)", callback_data="buy_super_like")],
        [InlineKeyboardButton(text="üöÄ –ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è ($3)", callback_data="buy_boost")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await message.answer(text, reply_markup=premium_kb)

# === –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ===
@dp.message(F.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def show_referral(message: Message):
    user_id = message.from_user.id
    referral_code = get_user_referral_code(user_id)
    stats = get_user_referral_stats(user_id)
    
    text = f"""üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
https://t.me/WeTogetherBot?start={referral_code}

üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: $1
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {stats['referrals_count']}
üíµ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats['total_earned']:.2f}

üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –≤–∞—à –¥—Ä—É–≥ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ"""
    
    await message.answer(text)

# === –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã ===
@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
async def delete_profile(message: Message):
    text = """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.

–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:
‚Ä¢ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ –ø–æ–∏—Å–∫–∞
‚Ä¢ –í—Å–µ –º–∞—Ç—á–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
‚Ä¢ –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω–∞

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É?"""
    
    delete_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")],
        [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")]
    ])
    
    await message.answer(text, reply_markup=delete_kb)

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∫—É–ø–æ–Ω–æ–≤ ===
@dp.message(lambda msg: msg.text and msg.text.startswith('/coupon'))
async def use_coupon_command(message: Message):
    try:
        coupon_code = message.text.split()[1].upper()
        user_id = str(message.from_user.id)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫—É–ø–æ–Ω–æ–≤
        coupon = coupon_system.get_coupon(coupon_code)
        
        if not coupon:
            await message.answer("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if coupon["is_used"]:
            await message.answer("‚ùå –≠—Ç–æ—Ç –∫—É–ø–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        from datetime import datetime
        expiry_date = datetime.fromisoformat(coupon["expires_at"])
        if datetime.now() > expiry_date:
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É–ø–æ–Ω–∞ –∏—Å—Ç–µ–∫.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–ø–æ–Ω
        if coupon_system.use_coupon(coupon_code, user_id):
            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            amount_rub = coupon['amount']
            amount_usd = amount_rub / 100  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å 1 USD = 100 RUB
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = None
            try:
                db = get_db()
                cur = db.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                cur.execute("SELECT balance FROM users WHERE user_id = ?", (message.from_user.id,))
                result = cur.fetchone()
                
                if result:
                    current_balance = result[0]
                    new_balance = current_balance + amount_usd
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, message.from_user.id))
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    cur.execute("""
                        INSERT INTO transactions (user_id, amount, type, description, status)
                        VALUES (?, ?, 'coupon', 'Coupon redemption', 'completed')
                    """, (message.from_user.id, amount_usd))
                    
                    db.commit()
                    
                    response = (
                        f"‚úÖ –ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n"
                        f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: ${amount_usd:.2f} ({amount_rub} —Ä—É–±.)\n"
                        f"üîë –ö–æ–¥: {coupon_code}\n"
                        f"üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
                        f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}"
                    )
                    await message.answer(response, reply_markup=main_kb)
        else:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    
            except Exception as e:
                print(f"Error updating balance: {e}")
                if db:
                    try:
                        db.rollback()
                    except:
                        pass
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
            finally:
                if db:
                    try:
                        db.close()
                    except:
                        pass
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞.")
            
    except IndexError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /coupon –ö–û–î_–ö–£–ü–û–ù–ê")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        print(f"Coupon error: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@dp.message(lambda msg: msg.text and msg.text.startswith('/create_cupone'))
async def create_coupon_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]
    
    if len(args) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_cupone <—Å—É–º–º–∞> <–¥–Ω–∏>\n"
            "–ü—Ä–∏–º–µ—Ä: /create_cupone 100 30\n\n"
            "üí∞ –°—É–º–º–∞ - –Ω–æ–º–∏–Ω–∞–ª –∫—É–ø–æ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö\n"
            "‚è∞ –î–Ω–∏ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—è –∫—É–ø–æ–Ω–∞"
        )
        return
    
    try:
        amount = float(args[0])
        days = int(args[1])
        
        if amount <= 0 or days <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫—É–ø–æ–Ω
        coupon = coupon_system.create_coupon(
            amount=amount,
            days_valid=days,
            created_by=str(user_id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫—É–ø–æ–Ω–µ
        response = (
            f"‚úÖ –ö—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"üîë –ö–æ–¥: `{coupon['code']}`\n"
            f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {coupon['expires_at'][:10]}\n"
            f"‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π\n\n"
            f"üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω –∫–æ–º–∞–Ω–¥–æ–π:\n"
            f"`/coupon {coupon['code']}`"
        )
        
        await message.answer(response, parse_mode='Markdown')
        
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: {str(e)}")

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ ===
@dp.message(lambda msg: msg.text and msg.text.startswith('/use_coupon'))
async def use_coupon_new_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)"""
    args = message.text.split()[1:]
    
    if len(args) != 1:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /use_coupon <–∫–æ–¥>")
        return
    
    coupon_code = args[0].upper()
    user_id = str(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—É–ø–æ–Ω
    coupon = coupon_system.get_coupon(coupon_code)
    
    if not coupon:
        await message.answer("‚ùå –ö—É–ø–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    if coupon["is_used"]:
        await message.answer("‚ùå –≠—Ç–æ—Ç –∫—É–ø–æ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    from datetime import datetime
    expiry_date = datetime.fromisoformat(coupon["expires_at"])
    if datetime.now() > expiry_date:
        await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫—É–ø–æ–Ω–∞ –∏—Å—Ç–µ–∫.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–ø–æ–Ω
    if coupon_system.use_coupon(coupon_code, user_id):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ —Å–∫–∏–¥–∫–∞ –Ω–∞ —É—Å–ª—É–≥–∏
        
        response = (
            f"‚úÖ –ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n"
            f"üí∞ –°—É–º–º–∞: {coupon['amount']} —Ä—É–±.\n"
            f"üîë –ö–æ–¥: {coupon_code}\n"
            f"üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\n"
            f"üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞!"
        )
        await message.answer(response)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞.")

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@dp.message(lambda msg: msg.text and msg.text.startswith('/active_coupons'))
async def active_coupons_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É–ø–æ–Ω–æ–≤.")
        return
    
    active_coupons = coupon_system.get_active_coupons()
    
    if not active_coupons:
        await message.answer("üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤ –Ω–µ—Ç.")
        return
    
    response = "üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∫—É–ø–æ–Ω—ã:\n\n"
    
    for coupon in active_coupons:
        response += (
            f"üîë –ö–æ–¥: `{coupon['code']}`\n"
            f"üí∞ –°—É–º–º–∞: {coupon['amount']} —Ä—É–±.\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {coupon['expires_at'][:10]}\n"
            f"üë§ –°–æ–∑–¥–∞–Ω: {coupon['created_by']}\n"
            f"---\n"
        )
    
    await message.answer(response, parse_mode='Markdown')

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@dp.message(lambda msg: msg.text and msg.text.startswith('/delete_coupon'))
async def delete_coupon_command(message: Message):
    """–£–¥–∞–ª—è–µ—Ç –∫—É–ø–æ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–æ–≤.")
        return
    
    args = message.text.split()[1:]
    
    if len(args) != 1:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_coupon <–∫–æ–¥>")
        return
    
    coupon_code = args[0].upper()
    
    # –£–¥–∞–ª—è–µ–º –∫—É–ø–æ–Ω
    if coupon_system.delete_coupon(coupon_code, str(user_id)):
        await message.answer(f"‚úÖ –ö—É–ø–æ–Ω {coupon_code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞ {coupon_code}.")

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@dp.message(lambda msg: msg.text and msg.text.startswith('/bot_stats'))
async def bot_stats_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return
    
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM users WHERE balance > 0")
        users_with_balance = cur.fetchone()[0]
        
        cur.execute("SELECT SUM(balance) FROM users")
        total_balance = cur.fetchone()[0] or 0
        
        cur.execute("SELECT COUNT(*) FROM matches")
        total_matches = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM saved_balances")
        saved_balances_count = cur.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É–ø–æ–Ω–∞–º
        active_coupons = coupon_system.get_active_coupons()
        active_coupons_count = len(active_coupons)
        
        response = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ WeTogether

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}
‚Ä¢ –° –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: {users_with_balance}
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}

üíï –ú–∞—Ç—á–∏:
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total_matches}

üé´ –ö—É–ø–æ–Ω—ã:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤: {active_coupons_count}

üí∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {saved_balances_count}

üíæ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"""
        
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot ===
@dp.callback_query(F.data == "topup_crypto")
async def topup_crypto(callback_query):
    user_id = callback_query.from_user.id
    
    text = """‚Çø –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot

üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 25.50)

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $1
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $100"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    try:
        state = FSMContext(storage=dp.storage, key=StorageKey(chat_id=callback_query.message.chat.id, user_id=user_id, bot_id=bot.id))
        await state.set_state(CryptoInput.waiting_for_amount)  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(waiting_for_amount=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    await callback_query.message.edit_text(text)
    await callback_query.answer()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è CryptoBot ===
@dp.message(CryptoInput.waiting_for_amount)
async def handle_crypto_amount_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        
        if amount < 1 or amount > 100:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç $1 –¥–æ $100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        user_id = message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –≤ CryptoBot
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${amount:.2f}"
        invoice = await crypto_bot.create_invoice(amount, user_id, description)
        
        if not invoice:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –≤ CryptoBot. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        
        invoice_id = invoice.get("invoice_id")
        pay_url = invoice.get("pay_url")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = None
        try:
            db = get_db()
            cur = db.cursor()
            cur.execute("""
                INSERT INTO payments (payment_id, user_id, amount, method, status, invoice_id)
                VALUES (?, ?, ?, 'crypto', 'pending', ?)
            """, (f"crypto_{invoice_id}", user_id, amount, str(invoice_id)))
            db.commit()
            
        except Exception as e:
            print(f"Error saving payment: {e}")
            if db:
                try:
                    db.rollback()
                except:
                    pass
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass
        
        text = f"""‚Çø –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot

üí∞ –°—É–º–º–∞: ${amount:.2f}
üÜî ID —Å—á–µ—Ç–∞: {invoice_id}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç.
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"""
        
        pay_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ${amount:.2f}", url=pay_url)],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_topup_payment_{invoice_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await message.answer(text, reply_markup=pay_kb)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –∏ –∞–≤—Ç–æ–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        try:
            await start_auto_check_payment(message.chat.id, user_id, str(invoice_id), amount)
        except Exception as e:
            print(f"‚ùå DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 10, 25.50):")
    except Exception as e:
        print(f"‚ùå CRYPTO ERROR: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# === –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ ===
@dp.callback_query(F.data == "use_balance_coupon")
async def use_balance_coupon(callback_query):
    user_id = callback_query.from_user.id
    
    text = """üé´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞

–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
/coupon –ö–û–î_–ö–£–ü–û–ù–ê

–ù–∞–ø—Ä–∏–º–µ—Ä: /coupon WETOGETHER1234

üí° –ö—É–ø–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:
‚Ä¢ –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –±–æ—Ç–µ
‚Ä¢ –û—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    await callback_query.message.edit_text(text)
    await callback_query.answer()

# === –ö—É–ø–∏—Ç—å —Å—É–ø–µ—Ä-–ª–∞–π–∫ ===
@dp.callback_query(F.data == "buy_super_like")
async def buy_super_like(callback_query):
    user_id = callback_query.from_user.id
    balance = get_user_balance(user_id)
    super_like_price = 1.0
    
    if balance < super_like_price:
        await callback_query.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        return
    
    if update_balance(user_id, -super_like_price):
        await callback_query.message.edit_text("‚≠ê –°—É–ø–µ—Ä-–ª–∞–π–∫ –∫—É–ø–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ —Ç–æ–ø–µ.")
    else:
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!")
    
    await callback_query.answer()

# === –ö—É–ø–∏—Ç—å –±—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è ===
@dp.callback_query(F.data == "buy_boost")
async def buy_boost(callback_query):
    user_id = callback_query.from_user.id
    balance = get_user_balance(user_id)
    boost_price = 3.0
    
    if balance < boost_price:
        await callback_query.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        return
    
    if update_balance(user_id, -boost_price):
        await callback_query.message.edit_text("üöÄ –ë—É—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∫—É–ø–ª–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —á–∞—â–µ.")
    else:
        await callback_query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!")
    
    await callback_query.answer()

# === –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ ===
@dp.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback_query):
    await callback_query.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await callback_query.answer()

# === –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ ===
@dp.callback_query(F.data == "confirm_delete")
async def confirm_delete(callback_query):
    user_id = callback_query.from_user.id
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance_result = cur.fetchone()
        saved_balance = balance_result[0] if balance_result else 0.0
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
        cur.execute("""
            INSERT OR REPLACE INTO saved_balances (user_id, balance, saved_at, reason)
            VALUES (?, ?, datetime('now'), 'profile_deletion')
        """, (user_id, saved_balance))
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)
        cur.execute("DELETE FROM likes WHERE user_id = ? OR liked_id = ?", (user_id, user_id))
        cur.execute("DELETE FROM matches WHERE user1_id = ? OR user2_id = ?", (user_id, user_id))
        cur.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        
        db.commit()
        
        await callback_query.message.edit_text(
            f"üóëÔ∏è –ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å ${saved_balance:.2f} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"üí° –ü—Ä–∏ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    finally:
        if db:
            try:
                db.close()
            except:
                pass
    
    await callback_query.answer()

# === –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä ===
@dp.callback_query(F.data == "romantic_tour")
async def romantic_tour(callback_query):
    user_id = callback_query.from_user.id
    balance = get_user_balance(user_id)
    
    text = f"""üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä - $2

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.

–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}"""
    
    await callback_query.message.edit_text(text, reply_markup=payment_kb)
    await callback_query.answer()

# === –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å ===
@dp.callback_query(F.data == "show_balance")
async def show_balance_callback(callback_query):
    user_id = callback_query.from_user.id
    balance = get_user_balance(user_id)
    
    text = f"""üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {format_balance(balance)}

üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑:
‚Ä¢ CryptoBot
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
‚Ä¢ –ö—É–ø–æ–Ω—ã"""
    
    balance_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Çø –ü–æ–ø–æ–ª–Ω–∏—Ç—å CryptoBot", callback_data="topup_crypto")],
        [InlineKeyboardButton(text="üé´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω", callback_data="use_balance_coupon")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=balance_kb)
    await callback_query.answer()

# === –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á ===
@dp.callback_query(F.data == "ignore_match")
async def ignore_match(callback_query):
    user_id = callback_query.from_user.id
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        # –£–¥–∞–ª—è–µ–º –º–∞—Ç—á
        cur.execute("DELETE FROM matches WHERE (user1_id = ? OR user2_id = ?) AND active = TRUE", (user_id, user_id))
        db.commit()
        
        await callback_query.message.edit_text("‚ùå –ú–∞—Ç—á –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.")
        await callback_query.answer()
        
    except Exception as e:
        print(f"Error ignoring match: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ç—á–∞.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è ===
@dp.callback_query(F.data == "start_tasks")
async def start_tasks(callback_query):
    user_id = callback_query.from_user.id
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("SELECT id, user1_id, user2_id FROM matches WHERE (user1_id = ? OR user2_id = ?) AND active = TRUE", (user_id, user_id))
        match = cur.fetchone()
        if not match:
            await callback_query.answer("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        match_id, user1_id, user2_id = match
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        await start_first_task(match_id, user1_id, user2_id)
        
        await callback_query.message.edit_text("üéÆ –ó–∞–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∏—Å—å!\n\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º.")
        await callback_query.answer()
        
    except Exception as e:
        print(f"Error starting tasks: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞–Ω–∏–π.")
    finally:
        if db:
            try:
                db.close()
            except:
                pass

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π ===
async def start_auto_check_payment(chat_id: int, user_id: int, invoice_id: str, amount: float):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"""
    
    async def check_payment_loop():
        for i in range(60):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 60 —Ä–∞–∑ (10 –º–∏–Ω—É—Ç)
            await asyncio.sleep(10)  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            status = await crypto_bot.check_invoice_status(invoice_id)
            
            if status == "paid":
                # –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω - –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                db = None
                try:
                    db = get_db()
                    cur = db.cursor()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω –ª–∏ —É–∂–µ –±–∞–ª–∞–Ω—Å
                    cur.execute("SELECT status FROM payments WHERE invoice_id = ?", (invoice_id,))
                    payment_status = cur.fetchone()
                    
                    if payment_status and payment_status[0] == "pending":
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                        cur.execute("UPDATE payments SET status = 'completed' WHERE invoice_id = ?", (invoice_id,))
                        
                        # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ
                        try:
                            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                            cur.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
                            current_balance = cur.fetchone()
                            
                            if current_balance:
                                new_balance = current_balance[0] + amount
                                cur.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
                                
                                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                                cur.execute("""
                                    INSERT INTO transactions (user_id, amount, type, description, status)
                                    VALUES (?, ?, 'topup', 'CryptoBot payment (auto)', 'completed')
                                """, (user_id, amount))
                                
                                db.commit()
                                
                                print(f"‚úÖ DEBUG: –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount:.2f}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
                                text = f"""‚úÖ –ü–ª–∞—Ç–µ–∂ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!

üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: ${amount:.2f}
üÜî ID —Å—á–µ—Ç–∞: {invoice_id}
üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}

–í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"""
                                
                                try:
                                    await bot.send_message(chat_id, text)
                                except:
                                    pass
                                
                                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                            else:
                                print(f"‚ùå DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                        except Exception as e:
                            print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
                            if db:
                                try:
                                    db.rollback()
                                except:
                                    pass
                except Exception as e:
                    print(f"Error in auto check: {e}")
                finally:
                    if db:
                        try:
                            db.close()
                        except:
                            pass
            
            elif status == "expired":
                # –°—á–µ—Ç –∏—Å—Ç–µ–∫
                try:
                    await bot.send_message(chat_id, "‚ùå –°—á–µ—Ç –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.")
                except:
                    pass
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(check_payment_loop())

# === –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è CryptoBot ===
@dp.callback_query(F.data.startswith("check_topup_payment_"))
async def check_topup_payment_callback(callback_query):
    user_id = callback_query.from_user.id
    invoice_id = callback_query.data.replace("check_topup_payment_", "")
    try:
        status = await crypto_bot.check_invoice_status(invoice_id)
        if status == "paid":
            # –ö—Ä–µ–¥–∏—Ç—É–µ–º –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω
            db = None
            try:
                db = get_db()
                cur = db.cursor()
                cur.execute("SELECT amount, status FROM payments WHERE invoice_id = ?", (invoice_id,))
                row = cur.fetchone()
                if not row:
                    await callback_query.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                    return
                amount, current_status = row
                if current_status == "completed":
                    await callback_query.answer("–≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω.", show_alert=True)
                    return
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –±–∞–ª–∞–Ω—Å
                cur.execute("UPDATE payments SET status = 'completed' WHERE invoice_id = ?", (invoice_id,))
                cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
                cur.execute(
                    """
                    INSERT INTO transactions (user_id, amount, type, description, status)
                    VALUES (?, ?, 'topup', 'CryptoBot payment (manual check)', 'completed')
                    """,
                    (user_id, amount),
                )
                db.commit()
                await callback_query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω!", show_alert=True)
                await callback_query.message.edit_text(
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω –∏ –∑–∞—á–∏—Å–ª–µ–Ω.\n\nüí∞ –°—É–º–º–∞: ${amount:.2f}\nüÜî ID —Å—á–µ—Ç–∞: {invoice_id}"
                )
            except Exception as e:
                if db:
                    try:
                        db.rollback()
                    except:
                        pass
                print(f"Error on manual topup credit: {e}")
                await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
            finally:
                if db:
                    try:
                        db.close()
                    except:
                        pass
        elif status == "pending":
            await callback_query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        elif status == "expired":
            await callback_query.answer("‚ùå –°—á–µ—Ç –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.", show_alert=True)
        else:
            await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)
    except Exception as e:
        print(f"Error on check_topup_payment: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.", show_alert=True)

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—É—Ä–∞ ===
async def start_romantic_tour(match_id: int, user1_id: int, user2_id: int):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        task_text = ROMANTIC_TASKS[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –û–ë–û–ò–ú —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        text = f"üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–∞—á–∞–ª—Å—è!\n\n–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ 1:\n{task_text}"
        
        try:
            await bot.send_message(user1_id, text)
        except:
            pass
        try:
            await bot.send_message(user2_id, text)
        except:
            pass
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –û–ë–û–ò–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        try:
            user1_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user1_id, user_id=user1_id, bot_id=bot.id))
            user2_state_context = FSMContext(storage=dp.storage, key=StorageKey(chat_id=user2_id, user_id=user2_id, bot_id=bot.id))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return
        
        await user1_state_context.set_state(TaskAnswer.waiting_for_answer)
        await user1_state_context.update_data(match_id=match_id, task_index=0, is_romantic=True, partner_id=user2_id)
        
        await user2_state_context.set_state(TaskAnswer.waiting_for_answer)
        await user2_state_context.update_data(match_id=match_id, task_index=0, is_romantic=True, partner_id=user1_id)
        
        print(f"‚úÖ DEBUG: –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç –¥–ª—è –º–∞—Ç—á–∞ {match_id} —É –û–ë–û–ò–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        print(f"‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –Ω–∞—á–∞–ª–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—É—Ä–∞: {e}")

# === –ü–æ–∫—É–ø–∫–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—É—Ä–∞ ===
@dp.callback_query(F.data == "buy_romantic_tour")
async def buy_romantic_tour(callback_query):
    user_id = callback_query.from_user.id
    balance = get_user_balance(user_id)
    
    text = f"""üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä - $2

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.

–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance:.2f}"""
    
    await callback_query.message.edit_text(text, reply_markup=payment_kb)
    await callback_query.answer()

# === –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ ===
@dp.callback_query(F.data == "pay_balance")
async def pay_with_balance(callback_query):
    user_id = callback_query.from_user.id
    balance = get_user_balance(user_id)
    tour_price = 2.0
    
    if balance < tour_price:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", show_alert=True)
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    if update_balance(user_id, -tour_price):
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        create_payment_transaction(user_id, tour_price, "balance", "completed")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä
        db = None
        try:
            db = get_db()
            cur = db.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –õ–Æ–ë–û–ì–û –º–∞—Ç—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ)
            cur.execute("UPDATE matches SET romantic_tour_paid = TRUE WHERE (user1_id = ? OR user2_id = ?)", (user_id, user_id))
            db.commit()
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–∞ - –õ–Æ–ë–û–ô –º–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("SELECT id, user1_id, user2_id FROM matches WHERE (user1_id = ? OR user2_id = ?) AND romantic_tour_paid = TRUE ORDER BY id DESC LIMIT 1", (user_id, user_id))
            match = cur.fetchone()
            
            if match:
                match_id, user1_id, user2_id = match
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                cur.execute("SELECT tasks_completed FROM matches WHERE id = ?", (match_id,))
                tasks_completed = cur.fetchone()[0]
                
                if tasks_completed >= REGULAR_TASKS_COUNT:
                    # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –ù–ï–ú–ï–î–õ–ï–ù–ù–û
                    await start_romantic_tour(match_id, user1_id, user2_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –û–ë–û–ò–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    try:
                        await bot.send_message(user1_id, "‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω!\n\nüíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–∞—á–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                    except:
                        pass
                    try:
                        await bot.send_message(user2_id, "‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω!\n\nüíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–∞—á–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                    except:
                        pass
                    
                    await callback_query.message.edit_text("‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞!\n\nüíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–∞—á–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É –û–ë–û–ò–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
                else:
                    # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                    await callback_query.message.edit_text("‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞!\n\n–¢—É—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 5 –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
            else:
                await callback_query.message.edit_text("‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞!\n\n–¢—É—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
                
        except Exception as e:
            print(f"Error updating match: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞!", show_alert=True)
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
    
    await callback_query.answer()

# === –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot ===
@dp.callback_query(F.data == "pay_crypto")
async def pay_with_crypto(callback_query):
    user_id = callback_query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ CryptoBot
    description = "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä - –¥–æ—Å—Ç—É–ø –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∑–∞–¥–∞–Ω–∏—è–º"
    invoice = await crypto_bot.create_invoice(2.0, user_id, description)
    
    if not invoice:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –≤ CryptoBot. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()
        return
    
    invoice_id = invoice.get("invoice_id")
    pay_url = invoice.get("pay_url")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
    db = None
    try:
        db = get_db()
        cur = db.cursor()
        cur.execute("""
            INSERT INTO payments (payment_id, user_id, amount, method, status, invoice_id)
            VALUES (?, ?, ?, 'crypto_romantic', 'pending', ?)
        """, (f"romantic_{invoice_id}", user_id, 2.0, str(invoice_id)))
        db.commit()
    except Exception as e:
        print(f"Error saving payment: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()
        return
    finally:
        if db:
            try:
                db.close()
            except:
                pass
    
    text = f"""üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä - $2

üí∞ –°—É–º–º–∞: $2.00
üÜî ID —Å—á–µ—Ç–∞: {invoice_id}

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞–Ω–∏—è–º —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"""
    
    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å $2.00", url=pay_url)],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_romantic_payment_{invoice_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    
    await callback_query.message.edit_text(text, reply_markup=pay_kb)
    await callback_query.answer()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—É—Ä–∞ ===
@dp.callback_query(F.data.startswith("check_romantic_payment_"))
async def check_romantic_payment_status(callback_query):
    user_id = callback_query.from_user.id
    invoice_id = callback_query.data.replace("check_romantic_payment_", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ CryptoBot API
    status = await crypto_bot.check_invoice_status(invoice_id)
    
    if status == "paid":
        # –ü–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä
        db = None
        try:
            db = get_db()
            cur = db.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            cur.execute("UPDATE payments SET status = 'completed' WHERE invoice_id = ?", (invoice_id,))
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–ª—è –õ–Æ–ë–û–ì–û –º–∞—Ç—á–∞ (–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ)
            cur.execute("UPDATE matches SET romantic_tour_paid = TRUE WHERE (user1_id = ? OR user2_id = ?)", (user_id, user_id))
            db.commit()
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç—É—Ä–∞ - –õ–Æ–ë–û–ô –º–∞—Ç—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("SELECT id, user1_id, user2_id FROM matches WHERE (user1_id = ? OR user2_id = ?) AND romantic_tour_paid = TRUE ORDER BY id DESC LIMIT 1", (user_id, user_id))
            match = cur.fetchone()
            
            if match:
                match_id, user1_id, user2_id = match
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                cur.execute("SELECT tasks_completed FROM matches WHERE id = ?", (match_id,))
                tasks_completed = cur.fetchone()[0]
                
                if tasks_completed >= REGULAR_TASKS_COUNT:
                    # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –ù–ï–ú–ï–î–õ–ï–ù–ù–û
                    await start_romantic_tour(match_id, user1_id, user2_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –û–ë–û–ò–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                    try:
                        await bot.send_message(user1_id, f"‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω!\n\nüíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–∞—á–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\nüÜî ID —Å—á–µ—Ç–∞: {invoice_id}")
                    except:
                        pass
                    try:
                        await bot.send_message(user2_id, f"‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω!\n\nüíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–∞—á–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\nüÜî ID —Å—á–µ—Ç–∞: {invoice_id}")
                    except:
                        pass
                    
                    text = f"""‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω!

üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –Ω–∞—á–∞–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É –û–ë–û–ò–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
üÜî ID —Å—á–µ—Ç–∞: {invoice_id}

–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ!"""
                else:
                    # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                    text = f"""‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω!

üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
üÜî ID —Å—á–µ—Ç–∞: {invoice_id}

–¢—É—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 5 –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"""
            else:
                text = f"""‚úÖ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –æ–ø–ª–∞—á–µ–Ω!

üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
üÜî ID —Å—á–µ—Ç–∞: {invoice_id}

–¢—É—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"""
            
            await callback_query.message.edit_text(text)
            await callback_query.answer("–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ç—É—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
        except Exception as e:
            print(f"Error activating romantic tour: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—É—Ä–∞!", show_alert=True)
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass
    
    elif status == "pending":
        await callback_query.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.", show_alert=True)
    
    elif status == "expired":
        await callback_query.answer("‚ùå –°—á–µ—Ç –∏—Å—Ç–µ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.", show_alert=True)
    
    else:
        await callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback_query):
    await callback_query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback_query.answer()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message(lambda msg: True)
async def handle_private_messages(message: Message):
    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è
    # –ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –¢–û–õ–¨–ö–û –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ process_task_answer
    return

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    retry_count = 0
    max_retries = 10
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ WeTogether...")
    print("üíæ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    
    while retry_count < max_retries:
        try:
            print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            await save_bot_state()
            
        await dp.start_polling(bot)
            break  # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            
    except KeyboardInterrupt:
            print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            await save_bot_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            break
            
        except Exception as e:
            retry_count += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await save_bot_state()
            
            if retry_count >= max_retries:
                print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                break
                
            wait_time = min(30, retry_count * 10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(wait_time)
            
    finally:
            try:
        await bot.session.close()
            except:
                pass
    
    print("üèÅ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

# === –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ===
async def save_bot_state():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ"""
    try:
        db = None
        try:
            db = get_db()
            cur = db.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cur.execute("""
                CREATE TABLE IF NOT EXISTS bot_backup (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    backup_type TEXT NOT NULL,
                    data TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cur.execute("SELECT COUNT(*) FROM users")
            users_count = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM users WHERE balance > 0")
            users_with_balance = cur.fetchone()[0]
            
            cur.execute("SELECT SUM(balance) FROM users")
            total_balance = cur.fetchone()[0] or 0
            
            backup_data = f"users:{users_count},with_balance:{users_with_balance},total_balance:{total_balance}"
            
            cur.execute("""
                INSERT INTO bot_backup (backup_type, data)
                VALUES ('statistics', ?)
            """, (backup_data,))
            
            db.commit()
            print(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance:.2f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            if db:
                try:
                    db.rollback()
                except:
                    pass
        finally:
            if db:
                try:
                    db.close()
                except:
                    pass
                    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main())
