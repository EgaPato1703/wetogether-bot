# admin.py
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from database import get_db
from config import *
from states import Admin

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ ID)
ADMIN_IDS = [598785828]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# === –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã ===
async def create_coupon(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer("üé´ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:")
    await state.set_state(Admin.waiting_for_coupon_code)

async def process_coupon_code(message: Message, state: FSMContext):
    coupon_code = message.text.upper().strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db = get_db()
    cur = db.cursor()
    cur.execute("SELECT id FROM coupons WHERE code = ?", (coupon_code,))
    if cur.fetchone():
        await message.answer("‚ùå –ö—É–ø–æ–Ω —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
        return
    
    await state.update_data(coupon_code=coupon_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20):")
    await state.set_state(Admin.waiting_for_discount)

async def process_discount(message: Message, state: FSMContext):
    try:
        discount = int(message.text)
        if discount < 1 or discount > 100:
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    await state.update_data(discount=discount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:")
    await state.set_state(Admin.waiting_for_max_uses)

async def process_max_uses(message: Message, state: FSMContext):
    try:
        max_uses = int(message.text)
        if max_uses < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    coupon_code = data['coupon_code']
    discount = data['discount']
    
    # –°–æ–∑–¥–∞–µ–º –∫—É–ø–æ–Ω
    db = get_db()
    cur = db.cursor()
    cur.execute("""
        INSERT INTO coupons (code, discount_percent, max_uses)
        VALUES (?, ?, ?)
    """, (coupon_code, discount, max_uses))
    db.commit()
    
    await message.answer(f"‚úÖ –ö—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω!\n\n"
                        f"–ö–æ–¥: {coupon_code}\n"
                        f"–°–∫–∏–¥–∫–∞: {discount}%\n"
                        f"–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}")
    await state.clear()

async def list_coupons(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    db = get_db()
    cur = db.cursor()
    cur.execute("""
        SELECT code, discount_percent, max_uses, current_uses, is_active
        FROM coupons ORDER BY created_at DESC
    """)
    coupons = cur.fetchall()
    
    if not coupons:
        await message.answer("üìã –ö—É–ø–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    text = "üìã –°–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤:\n\n"
    for code, discount, max_uses, current_uses, is_active in coupons:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        text += f"üé´ {code}\n"
        text += f"   –°–∫–∏–¥–∫–∞: {discount}%\n"
        text += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {current_uses}/{max_uses}\n"
        text += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await message.answer(text)

async def deactivate_coupon(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deactivate_coupon –ö–û–î")
        return
    
    coupon_code = args[1].upper().strip()
    
    db = get_db()
    cur = db.cursor()
    cur.execute("UPDATE coupons SET is_active = FALSE WHERE code = ?", (coupon_code,))
    
    if cur.rowcount > 0:
        await message.answer(f"‚úÖ –ö—É–ø–æ–Ω {coupon_code} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer(f"‚ùå –ö—É–ø–æ–Ω {coupon_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def activate_coupon(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate_coupon –ö–û–î")
        return
    
    coupon_code = args[1].upper().strip()
    
    db = get_db()
    cur = db.cursor()
    cur.execute("UPDATE coupons SET is_active = TRUE WHERE code = ?", (coupon_code,))
    
    if cur.rowcount > 0:
        await message.answer(f"‚úÖ –ö—É–ø–æ–Ω {coupon_code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer(f"‚ùå –ö—É–ø–æ–Ω {coupon_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def stats(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    db = get_db()
    cur = db.cursor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("SELECT COUNT(*) FROM users WHERE is_deleted = FALSE")
    total_users = cur.fetchone()[0]
    
    cur.execute("SELECT COUNT(*) FROM users WHERE is_deleted = FALSE AND referred_by IS NOT NULL")
    referred_users = cur.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
    cur.execute("SELECT COUNT(*) FROM matches")
    total_matches = cur.fetchone()[0]
    
    cur.execute("SELECT COUNT(*) FROM matches WHERE romantic_tour_paid = TRUE")
    romantic_tours = cur.fetchone()[0]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cur.execute("SELECT SUM(amount) FROM transactions WHERE type = 'payment' AND status = 'completed'")
    total_revenue = cur.fetchone()[0] or 0
    
    text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
   –í—Å–µ–≥–æ: {total_users}
   –ü–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: {referred_users}

üíï –ú–∞—Ç—á–∏:
   –í—Å–µ–≥–æ: {total_matches}
   –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—É—Ä–æ–≤: {romantic_tours}

üí∞ –î–æ—Ö–æ–¥—ã:
   –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${total_revenue:.2f}"""
    
    await message.answer(text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
def register_admin_commands(dp: Dispatcher):
    dp.message.register(create_coupon, Command("create_coupon"))
    dp.message.register(process_coupon_code, StateFilter(Admin.waiting_for_coupon_code))
    dp.message.register(process_discount, StateFilter(Admin.waiting_for_discount))
    dp.message.register(process_max_uses, StateFilter(Admin.waiting_for_max_uses))
    dp.message.register(list_coupons, Command("list_coupons"))
    dp.message.register(deactivate_coupon, Command("deactivate_coupon"))
    dp.message.register(activate_coupon, Command("activate_coupon"))
    dp.message.register(stats, Command("stats"))

    # === –ö—É–ø–æ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–Ω–æ–º–∏–Ω–∞–ª) ===
    dp.message.register(create_amount_coupon, Command("create_amount_coupon"))
    dp.message.register(process_amount_coupon_code, StateFilter(Admin.waiting_for_amount_coupon_code))
    dp.message.register(process_amount_value, StateFilter(Admin.waiting_for_amount_value))
    dp.message.register(process_amount_max_uses, StateFilter(Admin.waiting_for_amount_max_uses))

    # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
    dp.message.register(gen_amount_coupon_cmd, Command("gen_amount_coupon"))
    dp.message.register(list_amount_coupons, Command("list_amount_coupons"))


# ===== –ö—É–ø–æ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–Ω–æ–º–∏–Ω–∞–ª) =====
async def create_amount_coupon(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∫—É–ø–æ–Ω–∞-–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞ (A-Z/0-9):")
    await state.set_state(Admin.waiting_for_amount_coupon_code)

async def process_amount_coupon_code(message: Message, state: FSMContext):
    code = message.text.upper().strip()
    db = get_db()
    cur = db.cursor()
    cur.execute("SELECT id FROM balance_coupons WHERE code = ?", (code,))
    if cur.fetchone():
        await message.answer("‚ùå –ö—É–ø–æ–Ω —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
        return
    await state.update_data(amount_coupon_code=code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5.00):")
    await state.set_state(Admin.waiting_for_amount_value)

async def process_amount_value(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 2 –∏–ª–∏ 5.5")
        return
    await state.update_data(amount_value=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1):")
    await state.set_state(Admin.waiting_for_amount_max_uses)

async def process_amount_max_uses(message: Message, state: FSMContext):
    try:
        max_uses = int(message.text)
        if max_uses < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    code = data['amount_coupon_code']
    amount = data['amount_value']
    db = get_db()
    cur = db.cursor()
    cur.execute(
        """
        INSERT INTO balance_coupons (code, amount, max_uses)
        VALUES (?, ?, ?)
        """,
        (code, amount, max_uses),
    )
    db.commit()
    await message.answer(
        f"‚úÖ –ö—É–ø–æ–Ω –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω!\n\n–ö–æ–¥: {code}\n–°—É–º–º–∞: ${amount:.2f}\n–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}"
    )
    await state.clear()

async def gen_amount_coupon_cmd(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    # –§–æ—Ä–º–∞—Ç: /gen_amount_coupon CODE AMOUNT [MAX_USES]
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gen_amount_coupon CODE AMOUNT [MAX_USES]\n–ù–∞–ø—Ä–∏–º–µ—Ä: /gen_amount_coupon LOVE5 5 1")
        return
    code = parts[1].upper().strip()
    if not code.isalnum():
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (A-Z, 0-9).")
        return
    try:
        amount = float(parts[2].replace(',', '.'))
    except ValueError:
        await message.answer("‚ùå AMOUNT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 2.5")
        return
    if amount <= 0:
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return
    max_uses = 1
    if len(parts) >= 4:
        try:
            max_uses = int(parts[3])
        except ValueError:
            await message.answer("‚ùå MAX_USES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
            return
        if max_uses < 1:
            await message.answer("‚ùå MAX_USES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 1.")
            return
    db = get_db()
    cur = db.cursor()
    try:
        cur.execute(
            """
            INSERT INTO balance_coupons (code, amount, max_uses)
            VALUES (?, ?, ?)
            """,
            (code, amount, max_uses),
        )
        db.commit()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        return
    await message.answer(f"‚úÖ –ö—É–ø–æ–Ω —Å–æ–∑–¥–∞–Ω!\n–ö–æ–¥: {code}\n–°—É–º–º–∞: ${amount:.2f}\n–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}")

async def list_amount_coupons(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    db = get_db()
    cur = db.cursor()
    cur.execute(
        """
        SELECT code, amount, max_uses, current_uses, is_active, created_at
        FROM balance_coupons
        ORDER BY created_at DESC
        LIMIT 50
        """
    )
    rows = cur.fetchall()
    if not rows:
        await message.answer("üìã –ö—É–ø–æ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    text = "üìã –ö—É–ø–æ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50):\n\n"
    for code, amount, max_uses, current_uses, is_active, created_at in rows:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        text += f"üé´ {code} ‚Äî ${amount:.2f} ‚Äî {current_uses}/{max_uses} ‚Äî {status}\n"
    await message.answer(text)
